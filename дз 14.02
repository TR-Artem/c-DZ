#include <SFML/Graphics.hpp>
#include <vector>
#include <random>
#include <algorithm>

const int TILE_SIZE = 32;
const int MARGIN = 50;
const int INFO_HEIGHT = 50;

enum class TileState {
    Closed,
    Opened,
    Flagged
};

struct Tile {
    bool hasMine = false;
    int adjacentMines = 0;
    TileState state = TileState::Closed;
    sf::Sprite sprite;
};

class MinesweeperGame {
private:
    int width, height, mines;
    std::vector<std::vector<Tile>> board;
    sf::Texture tilesTexture;
    sf::Font font;
    bool gameOver = false;
    bool firstClick = true;
    int flagsPlaced = 0;
    int tilesOpened = 0;

    void resetBoard() {
        board.assign(height, std::vector<Tile>(width));
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                board[y][x].hasMine = false;
                board[y][x].adjacentMines = 0;
                board[y][x].state = TileState::Closed;
                board[y][x].sprite.setTexture(tilesTexture);
                board[y][x].sprite.setTextureRect(sf::IntRect(0, 0, TILE_SIZE, TILE_SIZE));
                board[y][x].sprite.setPosition(x * TILE_SIZE + MARGIN, y * TILE_SIZE + MARGIN + INFO_HEIGHT);
            }
        }
        gameOver = false;
        firstClick = true;
        flagsPlaced = 0;
        tilesOpened = 0;
    }

    void placeMines(int firstX, int firstY) {
        std::random_device rd;
        std::mt19937 gen(rd());
        std::vector<std::pair<int, int>> positions;

        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                if (x != firstX || y != firstY) {
                    positions.emplace_back(x, y);
                }
            }
        }

        std::shuffle(positions.begin(), positions.end(), gen);

        for (int i = 0; i < mines && i < positions.size(); ++i) {
            int x = positions[i].first;
            int y = positions[i].second;
            board[y][x].hasMine = true;

            // Update adjacent counts for neighboring tiles
            for (int dy = -1; dy <= 1; ++dy) {
                for (int dx = -1; dx <= 1; ++dx) {
                    if (dx == 0 && dy == 0) continue;
                    int nx = x + dx;
                    int ny = y + dy;
                    if (nx >= 0 && nx < width && ny >= 0 && ny < height) {
                        board[ny][nx].adjacentMines++;
                    }
                }
            }
        }
    }

    void revealTile(int x, int y) {
        if (x < 0 || x >= width || y < 0 || y >= height || board[y][x].state != TileState::Closed) {
            return;
        }

        board[y][x].state = TileState::Opened;
        tilesOpened++;

        if (board[y][x].hasMine) {
            gameOver = true;
            revealAllMines();
            return;
        }

        if (board[y][x].adjacentMines == 0) {
            // Reveal adjacent tiles if this tile is empty
            for (int dy = -1; dy <= 1; ++dy) {
                for (int dx = -1; dx <= 1; ++dx) {
                    if (dx == 0 && dy == 0) continue;
                    revealTile(x + dx, y + dy);
                }
            }
        }
    }

    void revealAllMines() {
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                if (board[y][x].hasMine) {
                    board[y][x].state = TileState::Opened;
                }
            }
        }
    }

    bool checkWin() {
        return tilesOpened == (width * height - mines);
    }

public:
    MinesweeperGame(int w, int h, int m) : width(w), height(h), mines(m) {
        if (!tilesTexture.loadFromFile("tiles.png")) {
            // If tiles.png is not found, create a simple texture
            sf::Image image;
            image.create(TILE_SIZE * 10, TILE_SIZE, sf::Color::White);
            tilesTexture.loadFromImage(image);
        }

        if (!font.loadFromFile("arial.ttf")) {
            // If font is not found, use the default font
            font = sf::Font();
        }

        resetBoard();
    }

    void handleClick(int mouseX, int mouseY, bool rightClick) {
        if (gameOver) return;

        // Convert screen coordinates to board coordinates
        int x = (mouseX - MARGIN) / TILE_SIZE;
        int y = (mouseY - MARGIN - INFO_HEIGHT) / TILE_SIZE;

        if (x < 0 || x >= width || y < 0 || y >= height) return;

        if (rightClick) {
            // Right click - place or remove flag
            if (board[y][x].state == TileState::Closed) {
                board[y][x].state = TileState::Flagged;
                flagsPlaced++;
            }
            else if (board[y][x].state == TileState::Flagged) {
                board[y][x].state = TileState::Closed;
                flagsPlaced--;
            }
        }
        else {
            // Left click - reveal tile
            if (board[y][x].state == TileState::Closed) {
                if (firstClick) {
                    firstClick = false;
                    placeMines(x, y);
                }
                revealTile(x, y);
            }
        }

        if (checkWin()) {
            gameOver = true;
        }
    }

    void draw(sf::RenderWindow& window) {
        // Draw info panel
        sf::RectangleShape infoPanel(sf::Vector2f(width * TILE_SIZE, INFO_HEIGHT));
        infoPanel.setPosition(MARGIN, MARGIN);
        infoPanel.setFillColor(sf::Color(200, 200, 200));
        window.draw(infoPanel);

        // Draw mines left counter
        sf::Text minesText;
        minesText.setFont(font);
        minesText.setString("Mines: " + std::to_string(mines - flagsPlaced));
        minesText.setCharacterSize(24);
        minesText.setFillColor(sf::Color::Black);
        minesText.setPosition(MARGIN + 10, MARGIN + 10);
        window.draw(minesText);

        // Draw game over message if needed
        if (gameOver) {
            sf::Text gameOverText;
            gameOverText.setFont(font);
            if (checkWin()) {
                gameOverText.setString("You Win!");
                gameOverText.setFillColor(sf::Color::Green);
            }
            else {
                gameOverText.setString("Game Over!");
                gameOverText.setFillColor(sf::Color::Red);
            }
            gameOverText.setCharacterSize(24);
            gameOverText.setPosition(MARGIN + width * TILE_SIZE / 2 - 80, MARGIN + 10);
            window.draw(gameOverText);
        }

        // Draw board
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                Tile& tile = board[y][x];
                int textureX = 0;

                if (gameOver && tile.hasMine) {
                    textureX = (tile.state == TileState::Flagged) ? 11 : 9;
                }
                else {
                    switch (tile.state) {
                    case TileState::Closed:
                        textureX = 0;
                        break;
                    case TileState::Flagged:
                        textureX = 10;
                        break;
                    case TileState::Opened:
                        if (tile.hasMine) {
                            textureX = 9;
                        }
                        else {
                            textureX = tile.adjacentMines;
                            if (textureX < 1 || textureX > 8) textureX = 0;
                        }
                        break;
                    }
                }

                tile.sprite.setTextureRect(sf::IntRect(textureX * TILE_SIZE, 0, TILE_SIZE, TILE_SIZE));
                window.draw(tile.sprite);
            }
        }
    }
};

int main() {
    const int BOARD_WIDTH = 10;
    const int BOARD_HEIGHT = 10;
    const int MINES_COUNT = 15;

    sf::RenderWindow window(sf::VideoMode(BOARD_WIDTH * TILE_SIZE + 2 * MARGIN,
        BOARD_HEIGHT * TILE_SIZE + 2 * MARGIN + INFO_HEIGHT),
        "Minesweeper");

    MinesweeperGame game(BOARD_WIDTH, BOARD_HEIGHT, MINES_COUNT);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
            else if (event.type == sf::Event::MouseButtonPressed) {
                if (event.mouseButton.button == sf::Mouse::Left) {
                    game.handleClick(event.mouseButton.x, event.mouseButton.y, false);
                }
                else if (event.mouseButton.button == sf::Mouse::Right) {
                    game.handleClick(event.mouseButton.x, event.mouseButton.y, true);
                }
            }
        }

        window.clear(sf::Color::White);
        game.draw(window);
        window.display
