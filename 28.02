#include <iostream>
#include <vector>
#include <string>

class Package {
private:
    std::string name;
    double weight;

public:
    Package(const std::string& n = "", double w = 0.0) : name(n), weight(w) {}

    std::string getName() const { return name; }
    double getWeight() const { return weight; }

    void setName(const std::string& n) { name = n; }
    void setWeight(double w) { weight = w; }
};

class Car {
protected:
    std::string brand;
    std::string model;
    int year;
    double fuelCapacity;

public:
    Car() : brand(""), model(""), year(0), fuelCapacity(0.0) {}

    Car(const std::string& b, const std::string& m, int y, double fc)
        : brand(b), model(m), year(y), fuelCapacity(fc) {}

    Car(const Car& other)
        : brand(other.brand), model(other.model), year(other.year), fuelCapacity(other.fuelCapacity) {}

    Car& operator=(const Car& other) {
        if (this != &other) {
            brand = other.brand;
            model = other.model;
            year = other.year;
            fuelCapacity = other.fuelCapacity;
        }
        return *this;
    }

    virtual ~Car() {}

    std::string getBrand() const { return brand; }
    std::string getModel() const { return model; }
    int getYear() const { return year; }
    double getFuelCapacity() const { return fuelCapacity; }

    void setBrand(const std::string& b) { brand = b; }
    void setModel(const std::string& m) { model = m; }
    void setYear(int y) { year = y; }
    void setFuelCapacity(double fc) { fuelCapacity = fc; }
};

class Truck final : public Car {
private:
    double maxPayload;
    std::vector<Package> packages;

public:
    Truck() : Car(), maxPayload(0.0) {}

    Truck(const std::string& b, const std::string& m, int y, double fc, double mp)
        : Car(b, m, y, fc), maxPayload(mp) {}

    Truck(const Truck& other)
        : Car(other), maxPayload(other.maxPayload), packages(other.packages) {}

    Truck& operator=(const Truck& other) {
        if (this != &other) {
            Car::operator=(other);
            maxPayload = other.maxPayload;
            packages = other.packages;
        }
        return *this;
    }

    ~Truck() override {}

    double getMaxPayload() const { return maxPayload; }
    const std::vector<Package>& getPackages() const { return packages; }

    void setMaxPayload(double mp) { maxPayload = mp; }

    void addPackage(const Package& p) {
        packages.push_back(p);
    }

    void clearPackages() {
        packages.clear();
    }

    bool isReady() const {
        double totalWeight = 0.0;
        for (const auto& pkg : packages) {
            totalWeight += pkg.getWeight();
        }
        return totalWeight <= maxPayload;
    }
};

int main() {
    Truck truck("Volvo", "FH16", 2022, 500.0, 20000.0);
    
    Package pkg1("Electronics", 5000.0);
    Package pkg2("Furniture", 8000.0);
    Package pkg3("Clothing", 3000.0);
    
    truck.addPackage(pkg1);
    truck.addPackage(pkg2);
    truck.addPackage(pkg3);
    
    std::cout << "Truck is ready to go: " << (truck.isReady() ? "Yes" : "No") << std::endl;
    
    return 0;
}
